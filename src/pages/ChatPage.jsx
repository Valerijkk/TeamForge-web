import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import io from 'socket.io-client';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –±—ç–∫–µ–Ω–¥—É
const socket = io('http://localhost:5000');

function ChatPage({ user }) {
    const { chatId } = useParams();
    const navigate = useNavigate();

    // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    const [messages, setMessages] = useState([]);
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    const [input, setInput] = useState('');
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const [file, setFile] = useState(null);
    // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    const [search, setSearch] = useState('');
    // –í–∫–ª—é—á—ë–Ω–Ω—ã–µ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const [notification, setNotification] = useState(true);
    // –ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —á–∞—Ç¬ª)
    const [status, setStatus] = useState('');

    // –í—Å–µ —Ä–µ–∞–∫—Ü–∏–∏ (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { user_id, reaction })
    // –ü—Ä–∏–º–µ—Ä: { 10: [ { user_id: 2, reaction: 'üëç' }, { user_id: 3, reaction: '‚ù§Ô∏è' } ] }
    const [messageReactions, setMessageReactions] = useState({});

    // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (—Ä–µ–∞–∫—Ü–∏–∏, –ø–µ—Ä–µ—Å–ª–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏ —Ç.–¥.)
    const [menuOpenForMsgId, setMenuOpenForMsgId] = useState(null);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, —É—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    useEffect(() => {
        if (!user) {
            navigate('/');
        }
    }, [user, navigate]);

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—É—á–∏—Ç—ã–≤–∞–µ–º user_id, —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ –∑–Ω–∞–ª, –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ "–¥–ª—è —Å–µ–±—è")
    const fetchMessages = useCallback(() => {
        // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —á—Ç–æ–±—ã –±—ç–∫–µ–Ω–¥ –∑–Ω–∞–ª user_id, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–µ
        let url = `http://localhost:5000/messages/${chatId}?user_id=${user.id}`;
        if (search) {
            url += `&q=${search}`;
        }
        fetch(url)
            .then(res => res.json())
            .then(data => setMessages(data));
    }, [chatId, search, user.id]);

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç `GET /reactions/<chat_id>`
    const fetchReactions = useCallback(() => {
        // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
        fetch(`http://localhost:5000/reactions/${chatId}`)
            .then(res => res.json())
            .then(data => {
                // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ data —ç—Ç–æ –æ–±—ä–µ–∫—Ç { [msgId]: [ {user_id, reaction}, ... ] }
                setMessageReactions(data);
            })
            .catch(() => {
                // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            });
    }, [chatId]);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ socket.io
    useEffect(() => {
        // 1) –í—Ö–æ–¥–∏–º –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
        socket.emit('join', { chat_id: chatId, username: user?.username || '' });
        // 2) –ì—Ä—É–∑–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        fetchMessages();
        // 3) –ì—Ä—É–∑–∏–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
        fetchReactions();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const handleReceiveMessage = (data) => {
            setMessages(prev => [...prev, data]);
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Ö–æ–¥–∞ —Ä–µ–∞–∫—Ü–∏–∏
        const handleReceiveReaction = (data) => {
            // data = { message_id, user_id, reaction }
            const { message_id, user_id, reaction } = data;
            setMessageReactions(prev => {
                const oldReactions = prev[message_id] || [];
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ä–µ–∞–∫—Ü–∏—é –æ—Ç —Ç–æ–≥–æ –∂–µ user_id (–µ—Å–ª–∏ –±—ã–ª–∞)
                const filtered = oldReactions.filter(r => r.user_id !== user_id);
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                filtered.push({ user_id, reaction });
                return { ...prev, [message_id]: filtered };
            });
        };

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const handleNotificationUpdated = (data) => {
            console.log('Notification settings updated:', data);
        };

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–∫—Ç–æ –≤–æ—à—ë–ª/–≤—ã—à–µ–ª)
        const handleStatus = (data) => {
            setStatus(data.message);
            setTimeout(() => setStatus(''), 3000);
        };

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö
        const handleMessageDeletedForAll = (data) => {
            // data = { message_id }
            // –ú–æ–∂–Ω–æ –ª–∏–±–æ —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å fetchMessages()
            setMessages((prev) => prev.filter(msg => msg.id !== data.message_id));
        };

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–∞
        const handleMessageDeletedForUser = (data) => {
            // data = { message_id, user_id }
            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if (data.user_id === user.id) {
                setMessages((prev) => prev.filter(msg => msg.id !== data.message_id));
            }
        };

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        socket.on('receive_message', handleReceiveMessage);
        socket.on('receive_reaction', handleReceiveReaction);
        socket.on('notification_updated', handleNotificationUpdated);
        socket.on('status', handleStatus);
        socket.on('message_deleted_for_all', handleMessageDeletedForAll);
        socket.on('message_deleted_for_user', handleMessageDeletedForUser);

        return () => {
            // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            socket.emit('leave', { chat_id: chatId, username: user?.username || '' });
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
            socket.off('receive_message', handleReceiveMessage);
            socket.off('receive_reaction', handleReceiveReaction);
            socket.off('notification_updated', handleNotificationUpdated);
            socket.off('status', handleStatus);
            socket.off('message_deleted_for_all', handleMessageDeletedForAll);
            socket.off('message_deleted_for_user', handleMessageDeletedForUser);
        };
    }, [chatId, user, fetchMessages, fetchReactions]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç + —Ñ–∞–π–ª)
    const sendMessage = async () => {
        if (!input && !file) return; // –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let media_filename = null;

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–∞ –±—ç–∫–µ–Ω–¥
        if (file) {
            const formData = new FormData();
            formData.append('file', file);
            const res = await fetch('http://localhost:5000/upload', { method: 'POST', body: formData });
            const uploadData = await res.json();
            media_filename = uploadData.filename;
        }

        // –ü–æ—Å—ã–ª–∞–µ–º —Å–æ–±—ã—Ç–∏–µ "send_message" –Ω–∞ —Å–æ–∫–µ—Ç
        socket.emit('send_message', {
            chat_id: chatId,
            sender_id: user.id,
            content: input,
            media_filename
        });

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        setInput('');
        setFile(null);
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter
    const handleKeyDown = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            sendMessage();
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ (—á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç)
    const sendReaction = (messageId, reaction) => {
        socket.emit('send_reaction', {
            chat_id: chatId,
            message_id: messageId,
            user_id: user.id,
            reaction
        });
        setMenuOpenForMsgId(null);
    };

    // –ü—Å–µ–≤–¥–æ-—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ /forward_message
    const forwardMessage = async (messageId) => {
        // –ü–æ–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
        const toChatId = prompt('–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        if (!toChatId) {
            setMenuOpenForMsgId(null);
            return;
        }

        const res = await fetch('http://localhost:5000/forward_message', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message_id: messageId,
                to_chat_id: parseInt(toChatId, 10),
                user_id: user.id
            })
        });
        const data = await res.json();
        if (data.status === 'success') {
            alert('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!');
        } else {
            alert(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: ${data.message}`);
        }
        setMenuOpenForMsgId(null);
    };

    // –ü—Å–µ–≤–¥–æ-—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≥–∏–∫–∏, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ alert)
    const replyMessage = (messageId) => {
        alert(`–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID=${messageId} (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)`);
        setMenuOpenForMsgId(null);
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deleteMessage = async (messageId, forAll = false) => {
        // –í—ã–∑—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç DELETE /messages/<messageId>?mode=everyone|me&user_id=<...>
        const mode = forAll ? 'everyone' : 'me';
        const url = `http://localhost:5000/messages/${messageId}?mode=${mode}&user_id=${user.id}`;
        const res = await fetch(url, { method: 'DELETE' });
        const data = await res.json();
        if (data.status === 'success') {
            // –ú–æ–∂–Ω–æ –ª–∏–±–æ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:
            await fetchMessages();
            // –ò–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–π —Å–æ–∫–µ—Ç–∞ "message_deleted_for_all" / "message_deleted_for_user"
            // –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ fetchMessages().
        } else {
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${data.message}`);
        }
        setMenuOpenForMsgId(null);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const toggleMenuForMessage = (msgId) => {
        setMenuOpenForMsgId(prev => (prev === msgId ? null : msgId));
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ñ–∞–π–ª
    const renderMedia = (filename) => {
        if (!filename) return null;
        const ext = filename.split('.').pop().toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
            return <img src={`http://localhost:5000/uploads/${filename}`} alt="media" />;
        }
        if (ext === 'pdf') {
            return (
                <a href={`http://localhost:5000/uploads/${filename}`} target="_blank" rel="noreferrer">
                    –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å PDF
                </a>
            );
        }
        return (
            <a href={`http://localhost:5000/uploads/${filename}`} target="_blank" rel="noreferrer">
                –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            </a>
        );
    };

    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const updateNotification = () => {
        setNotification(!notification);
        socket.emit('update_notification', {
            chat_id: chatId,
            user_id: user.id,
            notifications_enabled: !notification
        });
    };

    return (
        <div>
            <button onClick={() => navigate('/chats')}>‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤</button>
            <h2>TeamForge</h2>
            <button onClick={updateNotification}>
                {notification ? '–û—Ç–∫–ª—é—á–∏—Ç—å' : '–í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
            {status && <p className="status-message">{status}</p>}

            {/* –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <div>
                <input
                    type="search"
                    placeholder="–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π..."
                    value={search}
                    onChange={e => setSearch(e.target.value)}
                />
                <button onClick={fetchMessages}>–ò—Å–∫–∞—Ç—å</button>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <div className="chat-container">
                {messages.map((msg) => (
                    <div
                        className="message"
                        key={msg.id}
                        onClick={() => toggleMenuForMessage(msg.id)}
                        style={{ position: 'relative' }}
                    >
                        <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.sender_id}:</strong> {msg.content}

                        {/* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ (media_filename), –æ—Ç–æ–±—Ä–∞–∑–∏–º –µ–≥–æ */}
                        {msg.media_filename && (
                            <div>
                                {renderMedia(msg.media_filename)}
                            </div>
                        )}

                        {/* –û—Ç–æ–±—Ä–∞–∑–∏–º –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É —Å–æ–æ–±—â–µ–Ω–∏—è */}
                        {messageReactions[msg.id]?.length > 0 && (
                            <div style={{ marginTop: '5px' }}>
                                {messageReactions[msg.id].map((r, index) => (
                                    <div key={index}>
                                        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {r.user_id} –ø–æ—Å—Ç–∞–≤–∏–ª {r.reaction}
                                    </div>
                                ))}
                            </div>
                        )}

                        <div className="small-text">
                            {new Date(msg.timestamp).toLocaleString()}
                        </div>

                        {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (—Å–∫—Ä—ã—Ç–æ, –ø–æ–∫–∞ –Ω–µ –∫–ª–∏–∫–Ω–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) */}
                        {menuOpenForMsgId === msg.id && (
                            <div
                                style={{
                                    position: 'absolute',
                                    top: '40px',
                                    left: '10px',
                                    background: '#fff',
                                    border: '1px solid #ccc',
                                    borderRadius: '4px',
                                    padding: '10px',
                                    zIndex: 10
                                }}
                            >
                                <button onClick={() => sendReaction(msg.id, 'üëç')}>–†–µ–∞–∫—Ü–∏—è: üëç</button>
                                <button onClick={() => sendReaction(msg.id, '‚ù§Ô∏è')}>–†–µ–∞–∫—Ü–∏—è: ‚ù§Ô∏è</button>
                                <button onClick={() => forwardMessage(msg.id)}>–ü–µ—Ä–µ—Å–ª–∞—Ç—å</button>
                                <button onClick={() => replyMessage(msg.id)}>–û—Ç–≤–µ—Ç–∏—Ç—å</button>
                                <button onClick={() => deleteMessage(msg.id, false)}>–£–¥–∞–ª–∏—Ç—å —É —Å–µ–±—è</button>
                                <button onClick={() => deleteMessage(msg.id, true)}>–£–¥–∞–ª–∏—Ç—å —É –≤—Å–µ—Ö</button>
                            </div>
                        )}
                    </div>
                ))}
            </div>

            {/* –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            <div>
                <input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={input}
                    onChange={e => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                />
                <input
                    type="file"
                    onChange={e => setFile(e.target.files[0])}
                />
                <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>
    );
}

export default ChatPage;
